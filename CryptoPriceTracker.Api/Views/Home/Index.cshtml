@{
    ViewData["Title"] = "Crypto Price Tracker";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-5">
    <h1 class="display-4 text-center mb-4">Crypto Price Tracker</h1>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button id="updateBtn" type="button" class="btn btn-primary">üîÑ Update Prices</button>
        <span id="statusMessage" class="fw-bold"></span>
    </div>

    <div class="table-responsive">
        <table id="cryptoTable" class="table table-bordered table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Icon</th>
                    <th>Name</th>
                    <th>Symbol</th>
                    <th>Current Price</th>
                    <th>Currency</th>
                    <th>Last Updated</th>
                    <th>Trend</th>
                </tr>
            </thead>
            <tbody id="cryptoBody"></tbody>
        </table>
        <div class="d-flex justify-content-center my-4">
    <nav aria-label="Crypto pagination">
        <ul class="pagination mb-0">
            <li class="page-item">
                <button class="page-link" onclick="changePage(-1)">‚¨ÖÔ∏è Previous</button>
            </li>
            <li class="page-item disabled">
                <span class="page-link" id="pageNumber">Page 1</span>
            </li>
            <li class="page-item">
                <button class="page-link" onclick="changePage(1)">Next ‚û°Ô∏è</button>
            </li>
        </ul>
    </nav>
</div>

    </div>
</div>

<script>
    let currentPage = 1;
    const pageSize = 10;

    function getTrendIcon(previous, current) {
        if (previous == null) return "‚ûñ";

        const diff = current - previous;
        const pct = ((diff / previous) * 100).toFixed(2);

        if (diff > 0) return `üîº ${pct}%`;
        if (diff < 0) return `üîΩ ${pct}%`;

        return "‚ûñ";
    }

    async function fetchPrices() {
        const response = await fetch(`/api/crypto/latest-prices?page=${currentPage}&pageSize=${pageSize}`);
        const data = await response.json();
        const tbody = document.getElementById("cryptoBody");
        tbody.innerHTML = "";

        data.forEach(asset => {
            const lastUpdated = new Date(asset.lastUpdated).toLocaleString();
            const trend = getTrendIcon(asset.previousPrice, asset.price);

            const row = `
                <tr>
                    <td><img src="${asset.iconUrl}" alt="${asset.name}" width="40" height="40"/></td>
                    <td>${asset.name}</td>
                    <td>${asset.symbol.toUpperCase()}</td>
                    <td>$${asset.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                    <td>USD</td>
                    <td>${lastUpdated}</td>
                    <td>${trend}</td>
                </tr>`;
            tbody.insertAdjacentHTML("beforeend", row);
        });

        document.getElementById("pageNumber").innerText = `Page ${currentPage}`;
    }

    function changePage(direction) {
        currentPage = Math.max(1, currentPage + direction);
        fetchPrices();
    }

    document.getElementById("updateBtn").addEventListener("click", async () => {
        const btn = document.getElementById("updateBtn");
        const status = document.getElementById("statusMessage");

        btn.disabled = true;
        status.innerText = "‚è≥ Updating prices...";
        status.style.color = "black";

        try {
            const res = await fetch("/api/crypto/update-prices", { method: "POST" });
            if (res.ok) {
                status.innerText = "‚úÖ Prices updated!";
                status.style.color = "green";
                await fetchPrices();
            } else {
                status.innerText = "‚ùå Failed to update.";
                status.style.color = "red";
            }
        } catch (err) {
            status.innerText = "‚ùå Error: " + err.message;
            status.style.color = "red";
        } finally {
            btn.disabled = false;
        }
    });

    fetchPrices();
</script>

